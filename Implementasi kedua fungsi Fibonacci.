#include <iostream>
#include <chrono>

using namespace std;
using namespace std::chrono;

int fibonacciRecursive(int n) {
    if (n <= 1)
        return n;
    return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
}

int fibonacciDynamic(int n) {
    int fib[n + 1];
    fib[0] = 0;
    fib[1] = 1;
    for (int i = 2; i <= n; i++)
        fib[i] = fib[i - 1] + fib[i - 2];
    return fib[n];
}

int main() {
    int ns[] = {10, 25, 30, 40, 50};
    int num_ns = sizeof(ns) / sizeof(ns[0]);

    cout << "n\tRecursive\tDynamic\n";
    for (int i = 0; i < num_ns; i++) {
        int n = ns[i];

        auto start_rec = high_resolution_clock::now();
        fibonacciRecursive(n);
        auto stop_rec = high_resolution_clock::now();
        auto duration_rec = duration_cast<microseconds>(stop_rec - start_rec);

        auto start_dp = high_resolution_clock::now();
        fibonacciDynamic(n);
        auto stop_dp = high_resolution_clock::now();
        auto duration_dp = duration_cast<microseconds>(stop_dp - start_dp);

        cout << n << "\t" << duration_rec.count() << " microseconds\t"
             << duration_dp.count() << " microseconds\n";
    }

    return 0;
}
